module Srem

// (?`(name=(pattern))(pattern)(pattern))
type IfPattern
    name             String
    predicatePattern List
    thenPattern      List
    elsePattern      List

def readIf(regExp String, write charIndex Int) IfPattern
    const name String = readPatternName(regExp, charIndex)
    if charIndex != regExp.length() && regExp[charIndex] == '='
        charIndex++
        if charIndex != regExp.length() && regExp[charIndex] == '('
            charIndex++
            const predicatePattern List = readRegExp(regExp, charIndex)
            if charIndex != regExp.length()
                charIndex++
                if charIndex != regExp.length() && regExp[charIndex] == ')'
                    charIndex++
                    if charIndex != regExp.length() && regExp[charIndex] == '('
                        charIndex++
                        const thenPattern List = readRegExp(regExp, charIndex)
                        if charIndex != regExp.length()
                            charIndex++
                            if charIndex != regExp.length() && regExp[charIndex] == '('
                                charIndex++
                                const elsePattern List = readRegExp(regExp, charIndex)
                                if charIndex != regExp.length() && regExp[charIndex] == ')'
                                    charIndex++
                                    if charIndex != regExp.length() && regExp[charIndex] == ')'
                                        return IfPattern{name : name, predicatePattern: predicatePattern, thenPattern: thenPattern, elsePattern: elsePattern}
    throw(const::eid_invalidRegExp, "\q" + regExp + "\q is an invalid regular expression.", charIndex)

attach IfPattern to Pattern
    def patternMatch?(string String, pattern IfPattern, write charIndex Int, write namedStrings Map, isResultNeeded Bool) <>String
        const namedString <>String = namedStrings[pattern.name~()]
        if namedString.nothing?()
            return nothing
        var predicatePatternCharIndex Int = 0
        var tmpNamedStrings Map = namedStrings
        const subPattern List = namedString.patternMatch?(pattern.predicatePattern~(), predicatePatternCharIndex, tmpNamedStrings, false).nothing?().select(pattern.elsePattern~(), pattern.thenPattern~())
        return string.patternMatch?(subPattern, charIndex, namedStrings, isResultNeeded)
