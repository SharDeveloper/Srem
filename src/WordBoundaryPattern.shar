module Srem

// `b - word boundary
primitive WordBoundaryPattern

#alwaysinline
def WordBoundaryPattern() WordBoundaryPattern
    return unsafe_object(WordBoundaryPattern.typeNumber~(), 0)

attach WordBoundaryPattern to Independent

attach WordBoundaryPattern to Pattern
    def patternMatch?(string String, pattern WordBoundaryPattern, write charIndex Int, write namedStrings Map) <>String
        var leftIsChar Bool = false
        if charIndex != 0
            const currentChar Char = string[charIndex - 1]
            leftIsChar = (currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= '0' && currentChar <= '9') || currentChar == '_'
        var rightIsChar Bool = false
        if charIndex != string.length~()
            const currentChar Char = string[charIndex]
            rightIsChar = (currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= '0' && currentChar <= '9') || currentChar == '_'
        return (leftIsChar != rightIsChar).select("", nothing)
