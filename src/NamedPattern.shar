module Srem

// (?(name)pattern)
// name [a-z][a-zA-Z0-9_]
type NamedPattern
    name    String
    pattern List

def readNamedPattern(regExp String, write charIndex Int) NamedPattern
    const name String = readPatternName(regExp, charIndex)
    if charIndex == regExp.length() || regExp[charIndex] != ')'
        throw(const::eid_invalidRegExp, "\q" + regExp + "\q is an invalid regular expression.", charIndex)
    charIndex++
    const pattern NamedPattern = NamedPattern{name: name, pattern: readRegExp(regExp, charIndex)}
    return pattern

def readPatternName(regExp String, write charIndex Int) String
    if charIndex == regExp.length() || !regExp[charIndex].inRange?('a', '{')
        throw(const::eid_invalidRegExp, "\q" + regExp + "\q is an invalid regular expression.", charIndex)
    var result String = regExp[charIndex].toString()
    charIndex++
    for :(loop) charIndex < regExp.length(); charIndex++
        const currentChar Char = regExp[charIndex]
        if (currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= '0' && currentChar <= '9') || currentChar == '_'
            result.addItem(currentChar)
        else
            end loop
    return result

attach NamedPattern to Pattern
    def patternMatch?(string String, pattern NamedPattern, write charIndex Int, write namedStrings Map, isResultNeeded Bool) <>String
        const matchedString <>String = string.patternMatch?(pattern.pattern~(), charIndex, namedStrings, true)
        if !matchedString.nothing?()
            namedStrings.put(pattern.name~(), matchedString)
        return matchedString
