module Srem

// `B - non word boundary
primitive NonWordBoundaryPattern

#alwaysinline
def NonWordBoundaryPattern() NonWordBoundaryPattern
    return unsafe_object(NonWordBoundaryPattern.typeNumber(), 0)

attach NonWordBoundaryPattern to Independent

attach NonWordBoundaryPattern to Pattern
    def patternMatch?(string String, pattern NonWordBoundaryPattern, write charIndex Int, write namedStrings Map, isResultNeeded Bool) <>MString
        var leftIsChar Bool = false
        if charIndex != 0
            const currentChar Char = string[charIndex - 1]
            leftIsChar = (currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= '0' && currentChar <= '9') || currentChar == '_'
        var rightIsChar Bool = false
        if charIndex != string.length()
            const currentChar Char = string[charIndex]
            rightIsChar = (currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= '0' && currentChar <= '9') || currentChar == '_'
        return (leftIsChar == rightIsChar).select(MString{value : "", index : charIndex}, nothing)
